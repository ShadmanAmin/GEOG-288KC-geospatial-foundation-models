{
  "hash": "9bdfe80a2840714a98cdc1396ded07c4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Plotting Satellite Imagery\"\nsubtitle: \"Visualization techniques for geospatial data\"\njupyter: geoai\nformat: html\n---\n\n\n\n\n## Introduction\n\nEffective visualization is crucial for understanding satellite imagery and geospatial data. This cheatsheet covers essential plotting techniques.\n\n::: {#b0469f7e .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.patches as patches\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns\n\n# Set style for better plots\nplt.style.use('default')\nsns.set_palette(\"husl\")\n```\n:::\n\n\n## Creating Sample Satellite Data\n\n::: {#f2ae74d4 .cell execution_count=2}\n``` {.python .cell-code}\ndef create_sample_satellite_scene(size=256):\n    \"\"\"Create a realistic-looking satellite scene\"\"\"\n    \n    # Create coordinate grids\n    x = np.linspace(0, 10, size)\n    y = np.linspace(0, 10, size)\n    X, Y = np.meshgrid(x, y)\n    \n    # Simulate different land cover types\n    # Water bodies (low values)\n    water = np.exp(-((X - 2)**2 + (Y - 7)**2) / 2) * 0.3\n    water += np.exp(-((X - 8)**2 + (Y - 3)**2) / 4) * 0.25\n    \n    # Forest/vegetation (medium-high values)\n    forest = np.exp(-((X - 6)**2 + (Y - 8)**2) / 8) * 0.7\n    forest += np.exp(-((X - 3)**2 + (Y - 2)**2) / 6) * 0.6\n    \n    # Urban areas (varied values)\n    urban = np.exp(-((X - 7)**2 + (Y - 5)**2) / 3) * 0.8\n    \n    # Combine and add noise\n    scene = water + forest + urban\n    noise = np.random.normal(0, 0.05, scene.shape)\n    scene = np.clip(scene + noise, 0, 1)\n    \n    # Scale to typical satellite data range\n    return (scene * 255).astype(np.uint8)\n\n# Create sample scenes for different bands\nred_band = create_sample_satellite_scene()\ngreen_band = create_sample_satellite_scene() * 1.1\nblue_band = create_sample_satellite_scene() * 0.8\nnir_band = create_sample_satellite_scene() * 1.3\n\nprint(f\"Band shapes: {red_band.shape}\")\nprint(f\"Data ranges - Red: {red_band.min()}-{red_band.max()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBand shapes: (256, 256)\nData ranges - Red: 0-255\n```\n:::\n:::\n\n\n## Single Band Visualization\n\n::: {#46c7d070 .cell execution_count=3}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\n# Different colormaps for single bands\ncmaps = ['gray', 'viridis', 'plasma', 'RdYlBu_r']\nband_names = ['Grayscale', 'Viridis', 'Plasma', 'Red-Yellow-Blue']\n\nfor i, (cmap, name) in enumerate(zip(cmaps, band_names)):\n    ax = axes[i//2, i%2]\n    im = ax.imshow(red_band, cmap=cmap, interpolation='bilinear')\n    ax.set_title(f'{name} Colormap')\n    ax.axis('off')\n    plt.colorbar(im, ax=ax, shrink=0.8)\n\nplt.suptitle('Single Band Visualization with Different Colormaps', fontsize=14)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](plotting_satellite_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n## RGB Composite Images\n\n::: {#5f76971a .cell execution_count=4}\n``` {.python .cell-code}\ndef create_rgb_composite(r, g, b, enhance=True):\n    \"\"\"Create RGB composite with optional enhancement\"\"\"\n    \n    # Stack bands\n    rgb = np.stack([r, g, b], axis=-1)\n    \n    if enhance:\n        # Simple linear stretch enhancement\n        for i in range(3):\n            band = rgb[:,:,i].astype(float)\n            # Stretch to 2-98 percentile\n            p2, p98 = np.percentile(band, (2, 98))\n            band = np.clip((band - p2) / (p98 - p2), 0, 1)\n            rgb[:,:,i] = (band * 255).astype(np.uint8)\n    \n    return rgb\n\n# Create different composites\ntrue_color = create_rgb_composite(red_band, green_band, blue_band)\nfalse_color = create_rgb_composite(nir_band, red_band, green_band)\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 6))\n\naxes[0].imshow(true_color)\naxes[0].set_title('True Color Composite (RGB)')\naxes[0].axis('off')\n\naxes[1].imshow(false_color)\naxes[1].set_title('False Color Composite (NIR-Red-Green)')\naxes[1].axis('off')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.0..255.0].\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.0..255.0].\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](plotting_satellite_files/figure-html/cell-5-output-2.png){}\n:::\n:::\n\n\n## Spectral Indices Visualization\n\n::: {#0dd459d7 .cell execution_count=5}\n``` {.python .cell-code}\n# Calculate NDVI\ndef calculate_ndvi(nir, red):\n    \"\"\"Calculate Normalized Difference Vegetation Index\"\"\"\n    nir_f = nir.astype(float)\n    red_f = red.astype(float)\n    return (nir_f - red_f) / (nir_f + red_f + 1e-8)\n\n# Calculate other indices\nndvi = calculate_ndvi(nir_band, red_band)\n\n# Water index (using blue and NIR)\nndwi = calculate_ndvi(green_band, nir_band)\n\nfig, axes = plt.subplots(1, 3, figsize=(18, 5))\n\n# NDVI\nim1 = axes[0].imshow(ndvi, cmap='RdYlGn', vmin=-1, vmax=1, interpolation='bilinear')\naxes[0].set_title('NDVI (Vegetation Index)')\naxes[0].axis('off')\nplt.colorbar(im1, ax=axes[0], shrink=0.8)\n\n# NDWI  \nim2 = axes[1].imshow(ndwi, cmap='RdYlBu', vmin=-1, vmax=1, interpolation='bilinear')\naxes[1].set_title('NDWI (Water Index)')\naxes[1].axis('off')\nplt.colorbar(im2, ax=axes[1], shrink=0.8)\n\n# Histogram of NDVI values\naxes[2].hist(ndvi.flatten(), bins=50, alpha=0.7, color='green', edgecolor='black')\naxes[2].set_xlabel('NDVI Value')\naxes[2].set_ylabel('Frequency')\naxes[2].set_title('NDVI Distribution')\naxes[2].grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"NDVI range: {ndvi.min():.3f} to {ndvi.max():.3f}\")\nprint(f\"NDVI mean: {ndvi.mean():.3f}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](plotting_satellite_files/figure-html/cell-6-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNDVI range: -1.000 to 1.000\nNDVI mean: 0.122\n```\n:::\n:::\n\n\n## Custom Colormaps and Classification\n\n::: {#d7462ee9 .cell execution_count=6}\n``` {.python .cell-code}\n# Create land cover classification\ndef classify_land_cover(ndvi, ndwi):\n    \"\"\"Simple land cover classification\"\"\"\n    classification = np.zeros_like(ndvi, dtype=int)\n    \n    # Water (high NDWI, low NDVI)\n    water_mask = (ndwi > 0.3) & (ndvi < 0.1)\n    classification[water_mask] = 1\n    \n    # Vegetation (high NDVI)\n    veg_mask = ndvi > 0.4\n    classification[veg_mask] = 2\n    \n    # Bare soil/urban (low NDVI, low NDWI)  \n    bare_mask = (ndvi < 0.2) & (ndwi < 0.1)\n    classification[bare_mask] = 3\n    \n    return classification\n\n# Classify the scene\nland_cover = classify_land_cover(ndvi, ndwi)\n\n# Create custom colormap\ncolors = ['black', 'blue', 'green', 'brown', 'gray']\nn_classes = len(np.unique(land_cover))\ncustom_cmap = ListedColormap(colors[:n_classes])\n\nfig, axes = plt.subplots(1, 2, figsize=(14, 6))\n\n# Show classification\nim1 = axes[0].imshow(land_cover, cmap=custom_cmap, interpolation='nearest')\naxes[0].set_title('Land Cover Classification')\naxes[0].axis('off')\n\n# Custom legend\nfrom matplotlib.patches import Patch\nlegend_elements = [\n    Patch(facecolor='black', label='Unclassified'),\n    Patch(facecolor='blue', label='Water'),\n    Patch(facecolor='green', label='Vegetation'), \n    Patch(facecolor='brown', label='Bare Soil/Urban')\n]\naxes[0].legend(handles=legend_elements, loc='upper right')\n\n# Classification statistics\nunique_classes, counts = np.unique(land_cover, return_counts=True)\npercentages = counts / counts.sum() * 100\n\naxes[1].bar(['Unclassified', 'Water', 'Vegetation', 'Bare/Urban'][:len(unique_classes)], \n           percentages, color=['black', 'blue', 'green', 'brown'][:len(unique_classes)])\naxes[1].set_ylabel('Percentage of Pixels')\naxes[1].set_title('Land Cover Distribution')\naxes[1].grid(True, alpha=0.3)\n\nfor i, (cls, pct) in enumerate(zip(unique_classes, percentages)):\n    axes[1].text(i, pct + 1, f'{pct:.1f}%', ha='center', va='bottom')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](plotting_satellite_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n## Advanced Visualization Techniques\n\n::: {#a4ec7072 .cell execution_count=7}\n``` {.python .cell-code}\n# Multi-scale visualization\nfig, axes = plt.subplots(2, 3, figsize=(18, 12))\n\n# Full scene\naxes[0, 0].imshow(true_color)\naxes[0, 0].set_title('Full Scene')\naxes[0, 0].axis('off')\n\n# Add rectangle showing zoom area\nzoom_area = Rectangle((100, 100), 80, 80, linewidth=2, \n                     edgecolor='red', facecolor='none')\naxes[0, 0].add_patch(zoom_area)\n\n# Zoomed areas with different processing\nzoom_slice = (slice(100, 180), slice(100, 180))\n\n# Zoomed true color\naxes[0, 1].imshow(true_color[zoom_slice])\naxes[0, 1].set_title('Zoomed True Color')\naxes[0, 1].axis('off')\n\n# Zoomed false color\naxes[0, 2].imshow(false_color[zoom_slice])\naxes[0, 2].set_title('Zoomed False Color')\naxes[0, 2].axis('off')\n\n# Zoomed NDVI\nim1 = axes[1, 0].imshow(ndvi[zoom_slice], cmap='RdYlGn', vmin=-1, vmax=1)\naxes[1, 0].set_title('Zoomed NDVI')\naxes[1, 0].axis('off')\nplt.colorbar(im1, ax=axes[1, 0], shrink=0.8)\n\n# Zoomed classification\naxes[1, 1].imshow(land_cover[zoom_slice], cmap=custom_cmap, interpolation='nearest')\naxes[1, 1].set_title('Zoomed Classification')\naxes[1, 1].axis('off')\n\n# Profile plot\ncenter_row = land_cover.shape[0] // 2\nprofile_ndvi = ndvi[center_row, :]\nprofile_x = np.arange(len(profile_ndvi))\n\naxes[1, 2].plot(profile_x, profile_ndvi, 'g-', linewidth=2)\naxes[1, 2].axhline(y=0, color='k', linestyle='--', alpha=0.5)\naxes[1, 2].axhline(y=0.4, color='r', linestyle='--', alpha=0.5, label='Vegetation threshold')\naxes[1, 2].set_xlabel('Pixel Position')\naxes[1, 2].set_ylabel('NDVI Value')\naxes[1, 2].set_title('NDVI Profile (Center Row)')\naxes[1, 2].grid(True, alpha=0.3)\naxes[1, 2].legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.0..255.0].\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [37.0..255.0].\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [37.0..255.0].\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](plotting_satellite_files/figure-html/cell-8-output-2.png){}\n:::\n:::\n\n\n## Time Series Visualization\n\n::: {#74614d52 .cell execution_count=8}\n``` {.python .cell-code}\n# Simulate time series of NDVI\ndef create_ndvi_time_series(n_dates=12):\n    \"\"\"Create sample NDVI time series\"\"\"\n    dates = []\n    ndvi_values = []\n    \n    # Simulate seasonal pattern\n    base_ndvi = 0.4\n    seasonal_amplitude = 0.3\n    \n    for i in range(n_dates):\n        # Simulate monthly data\n        month_angle = (i / 12) * 2 * np.pi\n        seasonal_component = seasonal_amplitude * np.sin(month_angle + np.pi/2)  # Peak in summer\n        noise = np.random.normal(0, 0.05)\n        \n        ndvi_val = base_ndvi + seasonal_component + noise\n        ndvi_values.append(ndvi_val)\n        dates.append(f'Month {i+1}')\n    \n    return dates, ndvi_values\n\n# Create sample time series for different land cover types\ndates, forest_ndvi = create_ndvi_time_series()\n_, cropland_ndvi = create_ndvi_time_series()  \n_, urban_ndvi = create_ndvi_time_series()\n\n# Adjust for different land cover characteristics\ncropland_ndvi = [v * 0.8 + 0.1 for v in cropland_ndvi]  # Lower peak, higher base\nurban_ndvi = [v * 0.3 + 0.15 for v in urban_ndvi]  # Much lower overall\n\nplt.figure(figsize=(12, 6))\n\nplt.plot(dates, forest_ndvi, 'g-o', label='Forest', linewidth=2, markersize=6)\nplt.plot(dates, cropland_ndvi, 'orange', marker='s', label='Cropland', linewidth=2, markersize=6)  \nplt.plot(dates, urban_ndvi, 'gray', marker='^', label='Urban', linewidth=2, markersize=6)\n\nplt.xlabel('Time Period')\nplt.ylabel('NDVI Value')\nplt.title('NDVI Time Series by Land Cover Type')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.xticks(rotation=45)\nplt.ylim(-0.1, 0.8)\n\n# Add shaded regions for seasons\nsummer_months = [4, 5, 6, 7]  # Months 5-8\nplt.axvspan(summer_months[0]-0.5, summer_months[-1]+0.5, alpha=0.2, color='yellow', label='Summer')\n\nplt.tight_layout()\nplt.show()\n\n# Print some statistics\nprint(\"NDVI Statistics by Land Cover:\")\nprint(f\"Forest - Mean: {np.mean(forest_ndvi):.3f}, Std: {np.std(forest_ndvi):.3f}\")\nprint(f\"Cropland - Mean: {np.mean(cropland_ndvi):.3f}, Std: {np.std(cropland_ndvi):.3f}\")\nprint(f\"Urban - Mean: {np.mean(urban_ndvi):.3f}, Std: {np.std(urban_ndvi):.3f}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](plotting_satellite_files/figure-html/cell-9-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNDVI Statistics by Land Cover:\nForest - Mean: 0.407, Std: 0.202\nCropland - Mean: 0.420, Std: 0.166\nUrban - Mean: 0.271, Std: 0.067\n```\n:::\n:::\n\n\n## Summary\n\nKey visualization techniques covered:\n\n- **Single band visualization** with different colormaps\n- **RGB composite creation** and enhancement\n- **Spectral indices** (NDVI, NDWI) visualization  \n- **Custom colormaps** and classification maps\n- **Multi-scale visualization** with zoom and profiles\n- **Time series plotting** for temporal analysis\n\nThese techniques form the foundation for effective satellite imagery analysis and presentation.\n\n",
    "supporting": [
      "plotting_satellite_files"
    ],
    "filters": [],
    "includes": {}
  }
}